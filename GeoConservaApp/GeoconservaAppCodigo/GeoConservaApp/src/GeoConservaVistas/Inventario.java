/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GeoConservaVistas;

import ConexionDB.ConexionPostgre;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Image;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Stream;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.postgis.PGgeometry;
import org.postgis.Point;
import org.geotools.api.data.DataStore;
import org.geotools.api.data.DataStoreFinder;
import org.geotools.api.data.SimpleFeatureSource;
import org.geotools.api.referencing.crs.CoordinateReferenceSystem;
import org.geotools.api.style.Style;
import org.geotools.geometry.jts.ReferencedEnvelope;
import org.geotools.map.FeatureLayer;
import org.geotools.map.Layer;
import org.geotools.map.MapContent;
import org.geotools.referencing.CRS;
import org.geotools.styling.SLD;
import org.geotools.swing.JMapPane;
import org.locationtech.jts.geom.Coordinate;
import org.locationtech.jts.geom.Envelope;
//LIBRERIA jts(Java Topology Suite) con la cual trabaja Geotools https://www.osgeo.org/projects/jts/
import org.locationtech.jts.geom.Geometry;
import org.locationtech.jts.geom.GeometryFactory;

/**
 * manejo de la terminal de postgress SQL
 * https://www.youtube.com/watch?v=DmZkPTZXjNw&t=86s
 */
public class Inventario extends javax.swing.JFrame {

    //Instanciamos un objeto de la clase conexion
    ConexionPostgre con = new ConexionPostgre();
    //Creamos una variable de tipo conexion
    Connection cn;
    //Creamos variable para la consulta
    Statement st;
    //
    ResultSet rs;
    //Declaramos el mapa como un avariable global para poder acceder desde otras funciones
    private JMapPane mapa;
    //Creamos un modelo de tabla 
    DefaultTableModel modelo;
    //
    int id;
    List<Point> listaPuntosCuitzeo = new ArrayList<>();

    /**
     * Creates new form Inventario
     */
    public Inventario() {
        initComponents();
        setLocationRelativeTo(null);
        listadoGDB();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        jTextField5 = new javax.swing.JTextField();
        jpInformacion = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        txtSciName = new javax.swing.JTextField();
        txtComName = new javax.swing.JTextField();
        txtIdentify = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtSite = new javax.swing.JTextField();
        txtLongitud = new javax.swing.JTextField();
        txtLatitud = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jdtFecha = new com.toedter.calendar.JDateChooser();
        jLabel14 = new javax.swing.JLabel();
        txtImagen = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaDatos = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        btnAgregar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        lblImagen = new javax.swing.JLabel();
        panelMapa = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        btnLimpiar = new javax.swing.JButton();

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jTextField5.setText("jTextField5");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        jpInformacion.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel3.setText("ID:");

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel4.setText("Nombre Científico:");

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel5.setText("Nombre Común:");

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel6.setText("Observador:");

        txtID.setEditable(false);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel1.setText("Sitio:");

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel8.setText("Longitud:");

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel9.setText("Latitud:");

        jLabel10.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel10.setText("Información General");

        jLabel11.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel11.setText("Fecha Observación:");

        jdtFecha.setDateFormatString("yyyy-MM-dd");

        jLabel14.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel14.setText("Imagen:");

        javax.swing.GroupLayout jpInformacionLayout = new javax.swing.GroupLayout(jpInformacion);
        jpInformacion.setLayout(jpInformacionLayout);
        jpInformacionLayout.setHorizontalGroup(
            jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpInformacionLayout.createSequentialGroup()
                .addGroup(jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpInformacionLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel1)
                            .addComponent(jLabel14))
                        .addGap(18, 18, 18)
                        .addGroup(jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtSite, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                            .addComponent(txtLongitud)
                            .addComponent(txtLatitud)
                            .addComponent(txtImagen)))
                    .addGroup(jpInformacionLayout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(18, 18, 18)
                        .addComponent(jdtFecha, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jpInformacionLayout.createSequentialGroup()
                        .addGroup(jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpInformacionLayout.createSequentialGroup()
                                .addGap(78, 78, 78)
                                .addComponent(jLabel10))
                            .addGroup(jpInformacionLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addGap(18, 18, 18)
                                .addGroup(jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtSciName)
                                    .addComponent(txtComName)
                                    .addComponent(txtIdentify)
                                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jpInformacionLayout.setVerticalGroup(
            jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpInformacionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtSciName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtComName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtIdentify, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jdtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtSite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtLongitud, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtLatitud, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(txtImagen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(8, Short.MAX_VALUE))
        );

        tablaDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "nombreCientifico", "nombreComun", "Identificador", "FechaObs", "Sitio", "longitud", "latitud", "Imagen"
            }
        ));
        tablaDatos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaDatosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaDatos);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/imagen4.jpg"))); // NOI18N

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/imagen4.jpg"))); // NOI18N

        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        lblImagen.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51), 3));

        panelMapa.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51), 2));

        javax.swing.GroupLayout panelMapaLayout = new javax.swing.GroupLayout(panelMapa);
        panelMapa.setLayout(panelMapaLayout);
        panelMapaLayout.setHorizontalGroup(
            panelMapaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 421, Short.MAX_VALUE)
        );
        panelMapaLayout.setVerticalGroup(
            panelMapaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 368, Short.MAX_VALUE)
        );

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel7.setText("Inventario de Aves");

        jLabel13.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel13.setText("Imágenes");

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jpInformacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(45, 45, 45)
                                .addComponent(jLabel13))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(lblImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnLimpiar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addComponent(panelMapa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(jLabel12))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(jLabel2)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelMapa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel13)
                        .addGap(18, 18, 18)
                        .addComponent(lblImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jpInformacion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAgregar)
                            .addComponent(btnEliminar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBuscar)
                            .addComponent(btnLimpiar))
                        .addGap(12, 12, 12)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        buscarRegistros();
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        eliminarRegistro();
        listadoGDB(); //se refresca la lista de elementos en la tabla
        limpiarRegistros();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void tablaDatosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaDatosMouseClicked
        //cuando le demos click a una fila de las tablas.
        int fila = tablaDatos.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(null, "Registro no seleccionado");
        } else {
            id = Integer.parseInt((String) tablaDatos.getValueAt(fila, 0).toString());
            String nomCien = (String) tablaDatos.getValueAt(fila, 1);
            String nomComun = (String) tablaDatos.getValueAt(fila, 2);
            String observador = (String) tablaDatos.getValueAt(fila, 3);
            String fecha = (String) tablaDatos.getValueAt(fila, 4);
            String sitio = (String) tablaDatos.getValueAt(fila, 5);
            double latitud = Double.parseDouble((String) tablaDatos.getValueAt(fila, 6));
            double longitud = Double.parseDouble((String) tablaDatos.getValueAt(fila, 7));
            String rutaImagen = (String) tablaDatos.getValueAt(fila, 8);
            ImageIcon foto = new ImageIcon(rutaImagen);
            Icon ajusteFoto = new ImageIcon(foto.getImage().getScaledInstance(lblImagen.getWidth(), lblImagen.getHeight(), Image.SCALE_SMOOTH));
            String soloNombre = rutaImagen.split("C:/Users/diana/Documents/TirandoCódigo/GestiondeProyectos/Proyecto/Imagenes/DB_imagenes/")[1];
            txtID.setText("" + id);
            txtSciName.setText(nomCien);
            txtComName.setText(nomComun);
            txtIdentify.setText(observador);
            txtSite.setText(sitio);
            txtLongitud.setText("" + latitud);
            txtLatitud.setText("" + longitud);
            lblImagen.setIcon(ajusteFoto);
            txtImagen.setText(soloNombre);
            try {
                /**
                 * Conversión del String en Date
                 * https://stackoverflow.com/questions/70092834/how-to-pass-jtable-string-date-to-jdatechooser
                 */
                Date fechaFormatDate = new SimpleDateFormat("yyyy-MM-dd").parse(fecha);
                jdtFecha.setDate(fechaFormatDate);
            } catch (Exception e) {
                System.err.println("Error en la conversión de la fecha " + e);
            }
        }
    }//GEN-LAST:event_tablaDatosMouseClicked

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        agregarDatos();
        listadoGDB(); //se refresca la lista de elementos en la tabla
        limpiarRegistros();
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed

        limpiarRegistros();
        limpiarTablaSiHayDatos();

    }//GEN-LAST:event_btnLimpiarActionPerformed

    public void listadoGDB() {
        //hacemos una consulta a la tabla
        String sql = "Select*From puntoscuitzeo";

        //necesitamos un bloque try catch por cualquier error
        try {
            cn = con.getConnection();
            st = cn.createStatement();
            rs = st.executeQuery(sql);

            modelo = (DefaultTableModel) tablaDatos.getModel();
            //mientras haya más elementos, sigue iterando
            while (rs.next()) {
                Object[] puntosCuitzeo = new Object[9];
                puntosCuitzeo[0] = rs.getInt("id");
                puntosCuitzeo[1] = rs.getString("nombre_cie");
                puntosCuitzeo[2] = rs.getString("nombre_com");
                puntosCuitzeo[3] = rs.getString("nombreobs");
                String fechaCompleta = rs.getString("diaobs");
                String soloFecha = fechaCompleta.split(" ")[0];
                puntosCuitzeo[4] = soloFecha;
                puntosCuitzeo[5] = rs.getString("sitiobservacion");

                //Para leer la columna de geometry que contiene los puntos espaciales
                /**
                 * https://postgis.net/docs/manual-1.5/ch05.html#id366626
                 */
                PGgeometry geometria = (PGgeometry) rs.getObject("geom");
                if (geometria != null && geometria.getGeometry() instanceof Point) {
                    Point observacion = (Point) geometria.getGeometry();
                    puntosCuitzeo[6] = String.valueOf(observacion.getX());
                    puntosCuitzeo[7] = String.valueOf(observacion.getY());
                    //agregamos en la lista los puntos
                    // guardar para posteriores análisis: listaPuntosCuitzeo.add(observacion);
                } else {
                    puntosCuitzeo[6] = "";
                    puntosCuitzeo[7] = "";

                }
                //Para la imagen
                String nomImagen = rs.getString("Foto");
                String rutaCarpeta = "C:/Users/diana/Documents/TirandoCódigo/GestiondeProyectos/Proyecto/Imagenes/DB_imagenes/";
                String rutaCompleta = rutaCarpeta + nomImagen;
                puntosCuitzeo[8] = rutaCompleta;
                modelo.addRow(puntosCuitzeo);
            }
            tablaDatos.setModel(modelo);
            puntosCuitzeo();

        } catch (Exception e) {
            System.err.println("Error: " + e);

        }

    }
    // función para el mapa

    public void puntosCuitzeo() {
        //mostrar los puntos en el mapa
        try {
            /**
             * Conexión a Postgis porque geotools trabaja con sus propias
             * estructuras de datos espaciales la conexión que se necesita es
             * DataStoreFinder.getDataStore() con el dbtype: postgis.
             * https://docs.geotools.org/latest/userguide/library/jdbc/postgis.html
             */
            Map<String, Object> params = new HashMap<>();
            params.put("dbtype", "postgis"); //Must be the string postgis
            params.put("host", "localhost"); //Machine name or IP address to connect to
            params.put("port", 5432); // Port number to connect to, default 5432
            params.put("schema", "public"); //The database schema to access
            params.put("database", "Geoconserva");//The database to connect to
            params.put("user", "postgres");
            params.put("passwd", "3lls5y-2");
            params.put("preparedStatements", true);
            params.put("encode functions", true);
            /**
             * DataStore Finder para crear el shapefile de la base de datos
             * Postgis
             */

            DataStore dataStore = DataStoreFinder.getDataStore(params);
            if (dataStore == null) {
                System.out.println("No se pudo conectar a la base de datos de Postgis");
                return;
            }
            //Obtenemos el nombre de la tabla de los puntos y la cuenca con la geometría
            String shape = "puntoscuitzeo";
            String lagoCuitzeo = "LagoCuitzeoPoligono";
            SimpleFeatureSource featureSource = dataStore.getFeatureSource(shape);
            SimpleFeatureSource featureLago = dataStore.getFeatureSource(lagoCuitzeo);

            /**
             * Creación de las capas de puntos y polígonos y estilización
             * https://docs.geoserver.org/main/en/user/styling/sld/index.html
             * https://docs.geotools.org/stable/javadocs/org/geotools/styling/SLD.html
             */
            Style estiloPuntos = SLD.createPointStyle("Circle", java.awt.Color.BLACK, java.awt.Color.RED.darker(), 1.0f, 5.0f);
            Style estiloPoligono = SLD.createPolygonStyle(Color.LIGHT_GRAY, Color.BLUE, 1.0f);
            Layer capaCuitzeo = new FeatureLayer(featureSource, estiloPuntos);
            Layer capaLago = new FeatureLayer(featureLago, estiloPoligono);

            /**
             * Creación del contenido del mapa
             * https://docs.geotools.org/stable/javadocs/org/geotools/map/MapContent.html
             */
            MapContent mapaCuitzeo = new MapContent();
            mapaCuitzeo.setTitle("Mapa Inventario de Aves");
            mapaCuitzeo.addLayer(capaLago);
            mapaCuitzeo.addLayer(capaCuitzeo);
            /**
             * JMapPane para el canvas en el panelMapa
             * https://docs.geotools.org/stable/userguide/unsupported/swing/jmappane.html
             */

            mapa = new JMapPane(mapaCuitzeo);
            mapa.setPreferredSize(new Dimension(400, 400));
            panelMapa.setLayout(new BorderLayout());
            panelMapa.add(mapa, BorderLayout.CENTER);
            panelMapa.revalidate();
            panelMapa.repaint();

        } catch (Exception e) {
            System.err.println("Error: " + e);
        }

    }

    public void agregarDatos() {
        String nomCient = txtSciName.getText();
        String nomComun = txtComName.getText();
        String observador = txtIdentify.getText();
        /**
         * video JCalendar y JDateChooser
         * https://www.youtube.com/watch?v=ermc-HCb_N4&t=47s Formas de almacenar
         * fechas en JAVA+MySQLhttps://www.youtube.com/watch?v=52QBCoj6bPQ&t=53s
         */
        Date fechaFinal = null;
        Date seleccFecha = jdtFecha.getDate();
        if (seleccFecha == null) {
            JOptionPane.showMessageDialog(null, "Por favor ingresa una fecha");
            return;
        } else {
            fechaFinal = new java.sql.Date(seleccFecha.getTime());
            System.out.println("Fecha agregada correctamente");
        }

        String sitio = txtSite.getText();
        String latitudString = txtLatitud.getText();
        String longitudString = txtLongitud.getText();
        String imagen = txtImagen.getText();
        if (nomCient.equals("") || nomComun.equals("") || observador.equals("") || sitio.equals("")
                || latitudString.equals("") || longitudString.equals("") || fechaFinal == null || imagen.equals("")) {
            JOptionPane.showMessageDialog(null, "Por favor ingresa todos los datos ");
            limpiarTabla();
        } else {
            // convertimos la latitud y la longitud a double como viene la base de datos
            double latitud = Double.parseDouble(latitudString);
            double longitud = Double.parseDouble(longitudString);
            /**
             * https://postgis.net/docs/ST_MakePoint.html Para ir creando los
             * puntos t que nos genere la geometría con base en las coordenadas
             * agregadas y el SRID
             */

            String sql = "INSERT INTO puntoscuitzeo(diaobs, nombreobs, sitiobservacion, coord_x, coord_y, nombre_cie, nombre_com, foto,geom) VALUES ( ?, ?, ?, ?, ?, ?, ?,?, ST_SetSRID(ST_MakePoint(?, ?), 32614))";
            try {
                cn = con.getConnection();
                /**
                 * para mejorar el ingreso de datos externos a nuestra base de
                 * datos
                 * https://stackoverflow.com/questions/23179329/why-is-concatenating-sql-strings-a-bad-idea/23179451
                 * https://www.youtube.com/watch?v=wkKHPdxmmHU&t=102s
                 * https://stackoverflow.com/questions/1812891/java-escape-string-to-prevent-sql-injection
                 * https://docs.oracle.com/javase/8/docs/api/java/sql/PreparedStatement.html
                 */
                PreparedStatement ps = cn.prepareStatement(sql);
                ps.setDate(1, (java.sql.Date) fechaFinal);
                ps.setString(2, observador);
                ps.setString(3, sitio);
                ps.setDouble(4, latitud);
                ps.setDouble(5, longitud);
                ps.setString(6, nomCient);
                ps.setString(7, nomComun);
                ps.setString(8, imagen);
                ps.setDouble(9, longitud); // X
                ps.setDouble(10, latitud);  // Y

                ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "¡El Registro del ave ha sido agregado correctamente!");
                limpiarTabla();
            } catch (Exception e) {
                System.err.print("Error al insertar la información " + e);
            }
        }

    }

    public void buscarRegistros() {
        List<Geometry> puntosEncontrados = new ArrayList<>();
        String nomCient = txtSciName.getText().trim().toLowerCase();
        String nomComun = txtComName.getText().trim().toLowerCase();
        if (nomCient.isEmpty() && nomComun.isEmpty()) {
            JOptionPane.showMessageDialog(null, "No se encontraron registros");
        } else {
            String sql;
            try {
                cn = con.getConnection();
                st = cn.createStatement();
                //limpiar tabla
                modelo = (DefaultTableModel) tablaDatos.getModel();
                modelo.setRowCount(0);

                if (nomCient.isEmpty() && nomComun.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Necesitas agregar al menos un nombre común o ciéntifico para realizar la búsqueda");
                    return;
                } else {
                    if (!nomCient.isEmpty()) {
                        sql = "select * from puntoscuitzeo where LOWER(nombre_cie) LIKE '%" + nomCient + "%'";
                    } else {
                        sql = "select * from puntoscuitzeo where LOWER(nombre_com) LIKE '%" + nomComun + "%'";
                    }
                    rs = st.executeQuery(sql);
                    Object[] registros = new Object[9];
                    while (rs.next()) {
                        registros[0] = rs.getInt("id");
                        registros[1] = rs.getString("nombre_cie");
                        registros[2] = rs.getString("nombre_com");
                        registros[3] = rs.getString("nombreobs");
                        String fechaCompleta = rs.getString("diaobs");
                        String soloFecha = fechaCompleta.split(" ")[0];
                        registros[4] = soloFecha;
                        registros[5] = rs.getString("sitiobservacion");

                        //Para leer la columna de geometry que contiene los puntos espaciales
                        /**
                         * https://postgis.net/docs/manual-1.5/ch05.html#id366626
                         */
                        PGgeometry geometria = (PGgeometry) rs.getObject("geom");
                        if (geometria != null && geometria.getGeometry() instanceof org.postgis.Point) {
                            org.postgis.Point observacion = (org.postgis.Point) geometria.getGeometry();
                            GeometryFactory obsgeo = new GeometryFactory();
                            org.locationtech.jts.geom.Point obsBusqueda = obsgeo.createPoint(new Coordinate(observacion.getX(), observacion.getY()));
                            registros[6] = String.valueOf(observacion.getX());
                            registros[7] = String.valueOf(observacion.getY());
                            //agregamos en la lista los puntos
                            // guardar para posteriores análisis: listaPuntosCuitzeo.add(observacion);
                            puntosEncontrados.add(obsBusqueda);
                        } else {
                            registros[6] = "";
                            registros[7] = "";

                        }
                        String nomImagen = rs.getString("Foto");
                        String rutaCarpeta = "C:/Users/diana/Documents/TirandoCódigo/GestiondeProyectos/Proyecto/Imagenes/DB_imagenes/";
                        String rutaCompleta = rutaCarpeta + nomImagen;
                        registros[8] = rutaCompleta;
                        modelo.addRow(registros);

                    }
                    if (!puntosEncontrados.isEmpty()) {
                        /**
                         * https://docs.geotools.org/stable/userguide/library/jts/envelope.html
                         * https://locationtech.github.io/jts/javadoc/index.html
                         */

                        Envelope envelope = new Envelope();
                        for (Geometry g : puntosEncontrados) {
                            envelope.expandToInclude(g.getEnvelopeInternal());
                        }
                        CoordinateReferenceSystem crs = CRS.decode("EPSG:32614"); // UTM zona 14 Norte
                        ReferencedEnvelope refEnv = new ReferencedEnvelope(envelope, crs);
                        mapa.setDisplayArea(refEnv);
                    }
                    tablaDatos.setModel(modelo);
                    //Validamos el modelo por si no encontramos datos
                    if (modelo.getRowCount() == 0) {
                        JOptionPane.showMessageDialog(null, "No se encontraron datos con esta búsqueda");
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error al realizar la búsqueda" + e.getMessage());
                System.err.print("Error: " + e);
            }
        }
        /**
         * finally {
         *
         * try { if (rs != null) { rs.close(); } if (st != null) { st.close(); }
         * if (cn != null) { cn.close(); }
         *
         * } catch (Exception e) { System.err.print("Error: " + e); }
         *
         * }
         */

    }

    public void eliminarRegistro() {
        int filaSeleccion = tablaDatos.getSelectedRow();
        if (filaSeleccion == -1) {
            JOptionPane.showMessageDialog(null, "¡Debes seleccionar una fila!");
            limpiarTabla();
        } else {
            String sql = "delete from puntosCuitzeo where id=" + id;
            try {
                cn = con.getConnection();
                st = cn.createStatement();
                st.executeUpdate(sql);
                JOptionPane.showMessageDialog(null, "¡El registro ha sido eliminado correctamente!");
                limpiarTabla();
            } catch (Exception e) {
                System.err.print("Error: " + e);
            }
        }

    }

    public void limpiarTabla() { //para que no se dupliquen visualmente la tabla y limpie registros 
        modelo = (DefaultTableModel) tablaDatos.getModel();
        modelo.setRowCount(0);
    }
    public void limpiarTablaSiHayDatos() {
    modelo = (DefaultTableModel) tablaDatos.getModel();
    if (modelo.getRowCount() > 0) {
        modelo.setRowCount(0);
        listadoGDB();
    } else {
        JOptionPane.showMessageDialog(null, "No hay datos en la tabla para limpiar.");
    }
}

    public void limpiarRegistros() {

        if (txtID.getText().trim().isEmpty()
                && txtSciName.getText().trim().isEmpty()
                && txtComName.getText().trim().isEmpty()
                && jdtFecha.getDate() == null
                && txtIdentify.getText().trim().isEmpty()
                && txtSite.getText().trim().isEmpty()
                && txtLongitud.getText().trim().isEmpty()
                && txtLatitud.getText().trim().isEmpty()
                && txtImagen.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "No hay registros para limpiar.");
        } else {
            txtID.setText("");
            txtSciName.setText("");
            txtComName.setText("");
            jdtFecha.setDate(null);
            txtIdentify.setText("");
            txtSite.setText("");
            txtLongitud.setText("");
            txtLatitud.setText("");
            txtImagen.setText("");
            lblImagen.setIcon(null);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField5;
    private com.toedter.calendar.JDateChooser jdtFecha;
    private javax.swing.JPanel jpInformacion;
    private javax.swing.JLabel lblImagen;
    private javax.swing.JPanel panelMapa;
    private javax.swing.JTable tablaDatos;
    private javax.swing.JTextField txtComName;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtIdentify;
    private javax.swing.JTextField txtImagen;
    private javax.swing.JTextField txtLatitud;
    private javax.swing.JTextField txtLongitud;
    private javax.swing.JTextField txtSciName;
    private javax.swing.JTextField txtSite;
    // End of variables declaration//GEN-END:variables
}
